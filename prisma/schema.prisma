// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  name            String            @db.VarChar(60)
  email           String            @unique @db.VarChar(40)
  wage            Decimal
  updatedAt       DateTime          @updatedAt
  createdAt       DateTime          @default(now())
  debts           Debt[]
  Payments        Payments[]
  DebtsOnPayments DebtsOnPayments[]
}

model Debt {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int
  value           Decimal
  description     String?
  parts           Int               @default(0)
  startAt         DateTime          @default(now())
  endAt           DateTime?
  updatedAt       DateTime          @updatedAt
  createdAt       DateTime          @default(now())
  DebtsOnPayments DebtsOnPayments[]
}

model Payments {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId          Int
  debtValue       Decimal           @default(0)
  userReceived    Decimal
  date            DateTime
  updatedAt       DateTime          @updatedAt
  createdAt       DateTime          @default(now())
  paid            Boolean           @default(false)
  DebtsOnPayments DebtsOnPayments[]
}

model DebtsOnPayments {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  debt      Debt     @relation(fields: [debtId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  debtId    Int
  payment   Payments @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentId Int

  @@id([userId, debtId, paymentId])
}
